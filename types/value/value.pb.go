// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: value.proto

package value

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueListType int32

const (
	ValueListType_Unknown     ValueListType = 0
	ValueListType_Interface   ValueListType = 999
	ValueListType_Bool        ValueListType = 1
	ValueListType_Bytes       ValueListType = 2
	ValueListType_Double      ValueListType = 3
	ValueListType_Float       ValueListType = 4
	ValueListType_Int32       ValueListType = 5
	ValueListType_Int64       ValueListType = 6
	ValueListType_UInt32      ValueListType = 7
	ValueListType_UInt64      ValueListType = 8
	ValueListType_SInt32      ValueListType = 9
	ValueListType_SInt64      ValueListType = 10
	ValueListType_Fixed32     ValueListType = 11
	ValueListType_Fixed64     ValueListType = 12
	ValueListType_Time        ValueListType = 13
	ValueListType_Duration    ValueListType = 14
	ValueListType_ValueMap    ValueListType = 15
	ValueListType_ValueList   ValueListType = 16
	ValueListType_PtrBool     ValueListType = 17
	ValueListType_PtrDouble   ValueListType = 18
	ValueListType_PtrFloat    ValueListType = 19
	ValueListType_PtrInt32    ValueListType = 20
	ValueListType_PtrInt64    ValueListType = 21
	ValueListType_PtrUInt32   ValueListType = 22
	ValueListType_PtrUInt64   ValueListType = 23
	ValueListType_PtrSInt32   ValueListType = 24
	ValueListType_PtrSInt64   ValueListType = 25
	ValueListType_PtrFixed32  ValueListType = 26
	ValueListType_PtrFixed64  ValueListType = 27
	ValueListType_PtrTime     ValueListType = 28
	ValueListType_PtrDuration ValueListType = 29
	ValueListType_String      ValueListType = 30
	ValueListType_PtrString   ValueListType = 31
)

// Enum value maps for ValueListType.
var (
	ValueListType_name = map[int32]string{
		0:   "Unknown",
		999: "Interface",
		1:   "Bool",
		2:   "Bytes",
		3:   "Double",
		4:   "Float",
		5:   "Int32",
		6:   "Int64",
		7:   "UInt32",
		8:   "UInt64",
		9:   "SInt32",
		10:  "SInt64",
		11:  "Fixed32",
		12:  "Fixed64",
		13:  "Time",
		14:  "Duration",
		15:  "ValueMap",
		16:  "ValueList",
		17:  "PtrBool",
		18:  "PtrDouble",
		19:  "PtrFloat",
		20:  "PtrInt32",
		21:  "PtrInt64",
		22:  "PtrUInt32",
		23:  "PtrUInt64",
		24:  "PtrSInt32",
		25:  "PtrSInt64",
		26:  "PtrFixed32",
		27:  "PtrFixed64",
		28:  "PtrTime",
		29:  "PtrDuration",
		30:  "String",
		31:  "PtrString",
	}
	ValueListType_value = map[string]int32{
		"Unknown":     0,
		"Interface":   999,
		"Bool":        1,
		"Bytes":       2,
		"Double":      3,
		"Float":       4,
		"Int32":       5,
		"Int64":       6,
		"UInt32":      7,
		"UInt64":      8,
		"SInt32":      9,
		"SInt64":      10,
		"Fixed32":     11,
		"Fixed64":     12,
		"Time":        13,
		"Duration":    14,
		"ValueMap":    15,
		"ValueList":   16,
		"PtrBool":     17,
		"PtrDouble":   18,
		"PtrFloat":    19,
		"PtrInt32":    20,
		"PtrInt64":    21,
		"PtrUInt32":   22,
		"PtrUInt64":   23,
		"PtrSInt32":   24,
		"PtrSInt64":   25,
		"PtrFixed32":  26,
		"PtrFixed64":  27,
		"PtrTime":     28,
		"PtrDuration": 29,
		"String":      30,
		"PtrString":   31,
	}
)

func (x ValueListType) Enum() *ValueListType {
	p := new(ValueListType)
	*p = x
	return p
}

func (x ValueListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueListType) Descriptor() protoreflect.EnumDescriptor {
	return file_value_proto_enumTypes[0].Descriptor()
}

func (ValueListType) Type() protoreflect.EnumType {
	return &file_value_proto_enumTypes[0]
}

func (x ValueListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueListType.Descriptor instead.
func (ValueListType) EnumDescriptor() ([]byte, []int) {
	return file_value_proto_rawDescGZIP(), []int{0}
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to V:
	//	*Value_IsNull
	//	*Value_X
	//	*Value_B
	//	*Value_Pb
	//	*Value_S
	//	*Value_Ps
	//	*Value_D
	//	*Value_Pd
	//	*Value_F
	//	*Value_Pf
	//	*Value_I32
	//	*Value_Pi32
	//	*Value_I64
	//	*Value_Pi64
	//	*Value_U32
	//	*Value_Pu32
	//	*Value_U64
	//	*Value_Pu64
	//	*Value_S32
	//	*Value_Ps32
	//	*Value_S64
	//	*Value_Ps64
	//	*Value_F32
	//	*Value_Pf32
	//	*Value_F64
	//	*Value_Pf64
	//	*Value_T
	//	*Value_Pt
	//	*Value_Dur
	//	*Value_Pdur
	//	*Value_M
	//	*Value_L
	V isValue_V `protobuf_oneof:"v"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_value_proto_rawDescGZIP(), []int{0}
}

func (m *Value) GetV() isValue_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (x *Value) GetIsNull() bool {
	if x, ok := x.GetV().(*Value_IsNull); ok {
		return x.IsNull
	}
	return false
}

func (x *Value) GetX() []byte {
	if x, ok := x.GetV().(*Value_X); ok {
		return x.X
	}
	return nil
}

func (x *Value) GetB() bool {
	if x, ok := x.GetV().(*Value_B); ok {
		return x.B
	}
	return false
}

func (x *Value) GetPb() bool {
	if x, ok := x.GetV().(*Value_Pb); ok {
		return x.Pb
	}
	return false
}

func (x *Value) GetS() string {
	if x, ok := x.GetV().(*Value_S); ok {
		return x.S
	}
	return ""
}

func (x *Value) GetPs() string {
	if x, ok := x.GetV().(*Value_Ps); ok {
		return x.Ps
	}
	return ""
}

func (x *Value) GetD() float64 {
	if x, ok := x.GetV().(*Value_D); ok {
		return x.D
	}
	return 0
}

func (x *Value) GetPd() float64 {
	if x, ok := x.GetV().(*Value_Pd); ok {
		return x.Pd
	}
	return 0
}

func (x *Value) GetF() float32 {
	if x, ok := x.GetV().(*Value_F); ok {
		return x.F
	}
	return 0
}

func (x *Value) GetPf() float32 {
	if x, ok := x.GetV().(*Value_Pf); ok {
		return x.Pf
	}
	return 0
}

func (x *Value) GetI32() int32 {
	if x, ok := x.GetV().(*Value_I32); ok {
		return x.I32
	}
	return 0
}

func (x *Value) GetPi32() int32 {
	if x, ok := x.GetV().(*Value_Pi32); ok {
		return x.Pi32
	}
	return 0
}

func (x *Value) GetI64() int64 {
	if x, ok := x.GetV().(*Value_I64); ok {
		return x.I64
	}
	return 0
}

func (x *Value) GetPi64() int64 {
	if x, ok := x.GetV().(*Value_Pi64); ok {
		return x.Pi64
	}
	return 0
}

func (x *Value) GetU32() uint32 {
	if x, ok := x.GetV().(*Value_U32); ok {
		return x.U32
	}
	return 0
}

func (x *Value) GetPu32() uint32 {
	if x, ok := x.GetV().(*Value_Pu32); ok {
		return x.Pu32
	}
	return 0
}

func (x *Value) GetU64() uint64 {
	if x, ok := x.GetV().(*Value_U64); ok {
		return x.U64
	}
	return 0
}

func (x *Value) GetPu64() uint64 {
	if x, ok := x.GetV().(*Value_Pu64); ok {
		return x.Pu64
	}
	return 0
}

func (x *Value) GetS32() int32 {
	if x, ok := x.GetV().(*Value_S32); ok {
		return x.S32
	}
	return 0
}

func (x *Value) GetPs32() int32 {
	if x, ok := x.GetV().(*Value_Ps32); ok {
		return x.Ps32
	}
	return 0
}

func (x *Value) GetS64() int64 {
	if x, ok := x.GetV().(*Value_S64); ok {
		return x.S64
	}
	return 0
}

func (x *Value) GetPs64() int64 {
	if x, ok := x.GetV().(*Value_Ps64); ok {
		return x.Ps64
	}
	return 0
}

func (x *Value) GetF32() uint32 {
	if x, ok := x.GetV().(*Value_F32); ok {
		return x.F32
	}
	return 0
}

func (x *Value) GetPf32() uint32 {
	if x, ok := x.GetV().(*Value_Pf32); ok {
		return x.Pf32
	}
	return 0
}

func (x *Value) GetF64() uint64 {
	if x, ok := x.GetV().(*Value_F64); ok {
		return x.F64
	}
	return 0
}

func (x *Value) GetPf64() uint64 {
	if x, ok := x.GetV().(*Value_Pf64); ok {
		return x.Pf64
	}
	return 0
}

func (x *Value) GetT() *timestamppb.Timestamp {
	if x, ok := x.GetV().(*Value_T); ok {
		return x.T
	}
	return nil
}

func (x *Value) GetPt() *timestamppb.Timestamp {
	if x, ok := x.GetV().(*Value_Pt); ok {
		return x.Pt
	}
	return nil
}

func (x *Value) GetDur() int64 {
	if x, ok := x.GetV().(*Value_Dur); ok {
		return x.Dur
	}
	return 0
}

func (x *Value) GetPdur() int64 {
	if x, ok := x.GetV().(*Value_Pdur); ok {
		return x.Pdur
	}
	return 0
}

func (x *Value) GetM() *Value_ValueMap {
	if x, ok := x.GetV().(*Value_M); ok {
		return x.M
	}
	return nil
}

func (x *Value) GetL() *Value_ValueList {
	if x, ok := x.GetV().(*Value_L); ok {
		return x.L
	}
	return nil
}

type isValue_V interface {
	isValue_V()
}

type Value_IsNull struct {
	IsNull bool `protobuf:"varint,1,opt,name=isNull,proto3,oneof"`
}

type Value_X struct {
	X []byte `protobuf:"bytes,2,opt,name=x,proto3,oneof"`
}

type Value_B struct {
	B bool `protobuf:"varint,3,opt,name=b,proto3,oneof"`
}

type Value_Pb struct {
	Pb bool `protobuf:"varint,4,opt,name=pb,proto3,oneof"`
}

type Value_S struct {
	S string `protobuf:"bytes,5,opt,name=s,proto3,oneof"`
}

type Value_Ps struct {
	Ps string `protobuf:"bytes,6,opt,name=ps,proto3,oneof"`
}

type Value_D struct {
	D float64 `protobuf:"fixed64,7,opt,name=d,proto3,oneof"`
}

type Value_Pd struct {
	Pd float64 `protobuf:"fixed64,8,opt,name=pd,proto3,oneof"`
}

type Value_F struct {
	F float32 `protobuf:"fixed32,9,opt,name=f,proto3,oneof"`
}

type Value_Pf struct {
	Pf float32 `protobuf:"fixed32,10,opt,name=pf,proto3,oneof"`
}

type Value_I32 struct {
	I32 int32 `protobuf:"varint,11,opt,name=i32,proto3,oneof"`
}

type Value_Pi32 struct {
	Pi32 int32 `protobuf:"varint,12,opt,name=pi32,proto3,oneof"`
}

type Value_I64 struct {
	I64 int64 `protobuf:"varint,13,opt,name=i64,proto3,oneof"`
}

type Value_Pi64 struct {
	Pi64 int64 `protobuf:"varint,14,opt,name=pi64,proto3,oneof"`
}

type Value_U32 struct {
	U32 uint32 `protobuf:"varint,15,opt,name=u32,proto3,oneof"`
}

type Value_Pu32 struct {
	Pu32 uint32 `protobuf:"varint,16,opt,name=pu32,proto3,oneof"`
}

type Value_U64 struct {
	U64 uint64 `protobuf:"varint,17,opt,name=u64,proto3,oneof"`
}

type Value_Pu64 struct {
	Pu64 uint64 `protobuf:"varint,18,opt,name=pu64,proto3,oneof"`
}

type Value_S32 struct {
	S32 int32 `protobuf:"zigzag32,19,opt,name=s32,proto3,oneof"`
}

type Value_Ps32 struct {
	Ps32 int32 `protobuf:"zigzag32,20,opt,name=ps32,proto3,oneof"`
}

type Value_S64 struct {
	S64 int64 `protobuf:"zigzag64,21,opt,name=s64,proto3,oneof"`
}

type Value_Ps64 struct {
	Ps64 int64 `protobuf:"zigzag64,22,opt,name=ps64,proto3,oneof"`
}

type Value_F32 struct {
	F32 uint32 `protobuf:"fixed32,23,opt,name=f32,proto3,oneof"`
}

type Value_Pf32 struct {
	Pf32 uint32 `protobuf:"fixed32,24,opt,name=pf32,proto3,oneof"`
}

type Value_F64 struct {
	F64 uint64 `protobuf:"fixed64,25,opt,name=f64,proto3,oneof"`
}

type Value_Pf64 struct {
	Pf64 uint64 `protobuf:"fixed64,26,opt,name=pf64,proto3,oneof"`
}

type Value_T struct {
	T *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=t,proto3,oneof"`
}

type Value_Pt struct {
	Pt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=pt,proto3,oneof"`
}

type Value_Dur struct {
	Dur int64 `protobuf:"varint,29,opt,name=dur,proto3,oneof"`
}

type Value_Pdur struct {
	Pdur int64 `protobuf:"varint,30,opt,name=pdur,proto3,oneof"`
}

type Value_M struct {
	M *Value_ValueMap `protobuf:"bytes,31,opt,name=m,proto3,oneof"`
}

type Value_L struct {
	L *Value_ValueList `protobuf:"bytes,32,opt,name=l,proto3,oneof"`
}

func (*Value_IsNull) isValue_V() {}

func (*Value_X) isValue_V() {}

func (*Value_B) isValue_V() {}

func (*Value_Pb) isValue_V() {}

func (*Value_S) isValue_V() {}

func (*Value_Ps) isValue_V() {}

func (*Value_D) isValue_V() {}

func (*Value_Pd) isValue_V() {}

func (*Value_F) isValue_V() {}

func (*Value_Pf) isValue_V() {}

func (*Value_I32) isValue_V() {}

func (*Value_Pi32) isValue_V() {}

func (*Value_I64) isValue_V() {}

func (*Value_Pi64) isValue_V() {}

func (*Value_U32) isValue_V() {}

func (*Value_Pu32) isValue_V() {}

func (*Value_U64) isValue_V() {}

func (*Value_Pu64) isValue_V() {}

func (*Value_S32) isValue_V() {}

func (*Value_Ps32) isValue_V() {}

func (*Value_S64) isValue_V() {}

func (*Value_Ps64) isValue_V() {}

func (*Value_F32) isValue_V() {}

func (*Value_Pf32) isValue_V() {}

func (*Value_F64) isValue_V() {}

func (*Value_Pf64) isValue_V() {}

func (*Value_T) isValue_V() {}

func (*Value_Pt) isValue_V() {}

func (*Value_Dur) isValue_V() {}

func (*Value_Pdur) isValue_V() {}

func (*Value_M) isValue_V() {}

func (*Value_L) isValue_V() {}

type Value_ValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M map[string]*Value `protobuf:"bytes,1,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Value_ValueMap) Reset() {
	*x = Value_ValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_ValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_ValueMap) ProtoMessage() {}

func (x *Value_ValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_ValueMap.ProtoReflect.Descriptor instead.
func (*Value_ValueMap) Descriptor() ([]byte, []int) {
	return file_value_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Value_ValueMap) GetM() map[string]*Value {
	if x != nil {
		return x.M
	}
	return nil
}

type Value_ValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V []*Value      `protobuf:"bytes,1,rep,name=v,proto3" json:"v,omitempty"`
	T ValueListType `protobuf:"varint,2,opt,name=t,proto3,enum=ValueListType" json:"t,omitempty"`
}

func (x *Value_ValueList) Reset() {
	*x = Value_ValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_ValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_ValueList) ProtoMessage() {}

func (x *Value_ValueList) ProtoReflect() protoreflect.Message {
	mi := &file_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_ValueList.ProtoReflect.Descriptor instead.
func (*Value_ValueList) Descriptor() ([]byte, []int) {
	return file_value_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Value_ValueList) GetV() []*Value {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *Value_ValueList) GetT() ValueListType {
	if x != nil {
		return x.T
	}
	return ValueListType_Unknown
}

var File_value_proto protoreflect.FileDescriptor

var file_value_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86,
	0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x01, 0x78, 0x12, 0x0e, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x01, 0x62, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x02, 0x70, 0x62, 0x12, 0x0e, 0x0a, 0x01, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x01, 0x73, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x01, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x01, 0x64, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x70, 0x64, 0x12, 0x0e, 0x0a, 0x01, 0x66, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x01, 0x66, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x66, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x02, 0x70, 0x66, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x33,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x14,
	0x0a, 0x04, 0x70, 0x69, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x69, 0x36, 0x34,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x36, 0x34, 0x12, 0x12,
	0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x75, 0x33, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04,
	0x70, 0x75, 0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75,
	0x36, 0x34, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x33, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x73, 0x33, 0x32, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x04, 0x70, 0x73, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03,
	0x73, 0x36, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x03, 0x73, 0x36, 0x34,
	0x12, 0x14, 0x0a, 0x04, 0x70, 0x73, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x73, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x66,
	0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x04, 0x70, 0x66, 0x33, 0x32,
	0x12, 0x12, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52,
	0x03, 0x66, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x66, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x06, 0x48, 0x00, 0x52, 0x04, 0x70, 0x66, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x01, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x01, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x70, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x02, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x03, 0x64, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x64, 0x75, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x70, 0x64, 0x75, 0x72, 0x12, 0x1f,
	0x0a, 0x01, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x01, 0x6d, 0x12,
	0x20, 0x0a, 0x01, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x01,
	0x6c, 0x1a, 0x6e, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a,
	0x01, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x01, 0x6d, 0x1a, 0x3c, 0x0a, 0x06, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x01, 0x76, 0x12, 0x1c, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x01, 0x74, 0x42, 0x03, 0x0a, 0x01, 0x76, 0x2a, 0xc8, 0x03, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x10, 0xe7, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x74, 0x72, 0x42, 0x6f,
	0x6f, 0x6c, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x74, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10,
	0x13, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x74, 0x72, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x14, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x74, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x15, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x74, 0x72, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x74, 0x72, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x74, 0x72, 0x53, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x74,
	0x72, 0x53, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x74, 0x72,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x74, 0x72,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x74, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x74, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x74, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x10, 0x1f, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x66, 0x6f, 0x72, 0x64, 0x31, 0x30, 0x30, 0x30, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_value_proto_rawDescOnce sync.Once
	file_value_proto_rawDescData = file_value_proto_rawDesc
)

func file_value_proto_rawDescGZIP() []byte {
	file_value_proto_rawDescOnce.Do(func() {
		file_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_value_proto_rawDescData)
	})
	return file_value_proto_rawDescData
}

var file_value_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_value_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_value_proto_goTypes = []interface{}{
	(ValueListType)(0),            // 0: ValueListType
	(*Value)(nil),                 // 1: Value
	(*Value_ValueMap)(nil),        // 2: Value.ValueMap
	(*Value_ValueList)(nil),       // 3: Value.ValueList
	nil,                           // 4: Value.ValueMap.MEntry
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_value_proto_depIdxs = []int32{
	5, // 0: Value.t:type_name -> google.protobuf.Timestamp
	5, // 1: Value.pt:type_name -> google.protobuf.Timestamp
	2, // 2: Value.m:type_name -> Value.ValueMap
	3, // 3: Value.l:type_name -> Value.ValueList
	4, // 4: Value.ValueMap.m:type_name -> Value.ValueMap.MEntry
	1, // 5: Value.ValueList.v:type_name -> Value
	0, // 6: Value.ValueList.t:type_name -> ValueListType
	1, // 7: Value.ValueMap.MEntry.value:type_name -> Value
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_value_proto_init() }
func file_value_proto_init() {
	if File_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_ValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_ValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_value_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Value_IsNull)(nil),
		(*Value_X)(nil),
		(*Value_B)(nil),
		(*Value_Pb)(nil),
		(*Value_S)(nil),
		(*Value_Ps)(nil),
		(*Value_D)(nil),
		(*Value_Pd)(nil),
		(*Value_F)(nil),
		(*Value_Pf)(nil),
		(*Value_I32)(nil),
		(*Value_Pi32)(nil),
		(*Value_I64)(nil),
		(*Value_Pi64)(nil),
		(*Value_U32)(nil),
		(*Value_Pu32)(nil),
		(*Value_U64)(nil),
		(*Value_Pu64)(nil),
		(*Value_S32)(nil),
		(*Value_Ps32)(nil),
		(*Value_S64)(nil),
		(*Value_Ps64)(nil),
		(*Value_F32)(nil),
		(*Value_Pf32)(nil),
		(*Value_F64)(nil),
		(*Value_Pf64)(nil),
		(*Value_T)(nil),
		(*Value_Pt)(nil),
		(*Value_Dur)(nil),
		(*Value_Pdur)(nil),
		(*Value_M)(nil),
		(*Value_L)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_value_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_value_proto_goTypes,
		DependencyIndexes: file_value_proto_depIdxs,
		EnumInfos:         file_value_proto_enumTypes,
		MessageInfos:      file_value_proto_msgTypes,
	}.Build()
	File_value_proto = out.File
	file_value_proto_rawDesc = nil
	file_value_proto_goTypes = nil
	file_value_proto_depIdxs = nil
}
